>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix
[[1, 2, 3], [4, 5, 6]]

>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, "3")
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

>>> matrix = [1, 2, 3]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2], 3]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2], [3, 4, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

>>> matrix = [[1, 2], [float('inf'), 4]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer

>>> import math
>>> matrix = [[1, 2], [float('nan'), 4]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer

>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, float('nan'))
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer
